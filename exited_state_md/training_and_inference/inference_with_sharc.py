import sys, os
import spainn
from spainn.interface.sharcinterface import SHARC_NN

import os
import argparse
import schnetpack as spk
import time
import logging
import torch

from hydra.utils import instantiate
from omegaconf import OmegaConf, DictConfig


from ground_state_md.utils import set_data_prefix, setup_datamodule, get_num_workers, set_data_units_in_config
from ground_state_md.setup_logger import setup_logger
from ground_state_md.units import convert_time, convert_velocities, get_ase_units_from_str

from exited_state_md.utils import get_split_path, remove_splitting_lock_file, load_config # because it works with relative paths


# Example command to run the script from within code directory:
"""
screen -dmS inference_xtb sh -c 'python -m exited_state_md.training_and_inference.inference_with_sharc -mdir epochs_200_bs_32_lr_0.0001_flw_0.6_elw_0.01_nlw_0.39_seed_42 --units bohr_hartree_aut --md_steps 10000 --time_step 0.5 ; exec bash'
"""


logger = setup_logger("debug")

def parse_args() -> dict:
    """ Parse command-line arguments. 

    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Script for predicting with trained model on TDDFT test data using SPaiNN.")
    # paths setup
    parser.add_argument("--trajectory_dir", type=str, default="PREPARE_12/spainn_datasets", help="Directory containing the trajectory data generated by Turbomole (default: PREPARE_12/spainn_datasets)")
    parser.add_argument("--units", type=str, default="angstrom_kcal_per_mol_fs", choices=["angstrom_kcal_per_mol_fs", "angstrom_ev_fs", "angstrom_hartree_fs", "bohr_hartree_aut"], help="Units for the input data (default: angstrom_kcal_per_mol_fs).")
    parser.add_argument("-mdir", "--model_dir", type=str, default="epochs_1000_bs_100_lr_0.0001_seed_42", help="Directory of the trained model (default: epochs_1000_bs_100_lr_0.0001_seed_42)")
    parser.add_argument("-mds", "--md_steps", type=int, default=10, help="Number of MD steps to run (default: 10)")
    parser.add_argument("-ts", "--time_step", type=float, default=0.5, help="Time step for the MD simulation in fs (default: 0.5 fs)")
    parser.add_argument("-f", "--fold", type=int, default=0, help="Fold number for cross-validation (default: 0)")
    parser.add_argument("-s", "--seed", type=int, default=42, help="Random seed for reproducibility (default: 42)")
    parser.add_argument("-nw", "--num_workers", type=int, default=-1, help="Number of workers for data loading (default: -1, which sets it to 0 on macOS and 8 on Linux)")
    return vars(parser.parse_args())


def main(trajectory_dir: str, units: str, model_dir: str, md_steps: int, time_step: float, fold: int, seed: int, num_workers: int):
   
   


    models = ["train/best_model_E_F_C"]
    th = None # for active learning, e.g., {'energy': 0.004}
    # symbols of sample molecule
    atoms = 'O' + 'C' * 27 + 'H' * 20 
    nn = SHARC_NN(modelpath=models, # path to NN models
        atoms=atoms, 
        n_states={'n_singlets': 3, 'n_triplets': 0}, # dict of state numbers
        thresholds=th,
        cutoff=5.0, # for building representation
        nac_key="smooth_nacs", # model trained on smoothed nacs
        properties=['energy','forces','smooth_nacs'] # properties predicted by NN
    )
    nn.run_sharc("./input",0)


if __name__ == "__main__":
    args = parse_args()
    main(**args)
    remove_splitting_lock_file