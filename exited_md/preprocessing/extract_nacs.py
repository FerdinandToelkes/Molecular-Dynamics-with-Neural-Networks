import os
import argparse

from tqdm import tqdm

from exited_md.preprocessing.utils import prepare_last_exited_cycles, set_path_and_remove_old_file
from ground_state_md.utils import set_data_prefix
from ground_state_md.setup_logger import setup_logger


# Script uses the bash script extract_nacs.sh to extract nacs from the control file for all GEO folders.
# Example command to run the script from within code directory:
"""
python3 -m exited_md.preprocessing.extract_nacs --target_dir PREPARE_12
"""

logger = setup_logger(logging_level_str="info")

def parse_args() -> dict:
    """ Parse command-line arguments. 

    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Extract the nacs into a text file for all GEO folders.")
    parser.add_argument("--target_dir", type=str, default="PREPARE_12", help="Directory containing the trajectory data generated by Turbomole (default: PREPARE_12)")
    parser.add_argument("--computed_cycles", type=int, default=1461, help="Number of cycles for which the gradients were computed (default: 1461)")
    return vars(parser.parse_args())


def main(target_dir: str, computed_cycles: int):
    """
    Main function to extract all nacs from different log files and save them to a text file.
    Args:
        target_dir (str): Directory where the log files are located.
    """
    # setup
    data_path = os.path.join(set_data_prefix(), target_dir)
    logger.debug(f"data_path: {data_path}")
    command_path = os.path.expanduser(f'~/whk/code/exited_md/preprocessing/extract_nacs.sh')
    if not os.path.exists(command_path):
        raise FileNotFoundError(f"Command path {command_path} does not exist. Please check the path.")

    # get all valid trajectories and the number of their last exited cycles
    last_exited_cycles = prepare_last_exited_cycles(data_path, computed_cycles)

    # exited cycle and then from ex_gradient file the rest
    for geo_dir, _last_exited_cycle in tqdm(last_exited_cycles.items(), desc="Extracting nacs"):
        path_to_control_file = os.path.join(data_path, geo_dir, "test", "control")
        output_path = set_path_and_remove_old_file(data_path, geo_dir, "nacs.txt")
        
        # touch the output file and add header
        with open(output_path, "w") as f:
            f.write(f"# Extracted nacs from the control file in {path_to_control_file}\n")
            f.write("# All properties are in atomic units, i.e. nacs in 1/Bohr\n")

        # execute bash script, e.g. extract_gradient.sh
        os.system(f"bash {command_path} {path_to_control_file} >> {output_path}")
        logger.info(f"Extracted nacs saved to {output_path}")
        
            


if __name__ == "__main__":
    args = parse_args()
    main(**args)
    
        