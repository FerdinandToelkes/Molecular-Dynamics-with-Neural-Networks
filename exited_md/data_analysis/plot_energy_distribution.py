import os
import argparse
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from ase.db import connect

from md_with_schnet.utils import set_data_prefix

# This is the code from the first SPaiNN tutorial, which is used to plot the energy distribution of the prepared dataset.
# Example command to run the script from within code directory:
"""
python -m exited_md.data_analysis.plot_energy_distribution
"""

def parse_args() -> dict:
    """ 
    Parse command-line arguments. 
    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Prepare TDDFT data for usage in SchNetPack")
    parser.add_argument("--target_dir", type=str, default="PREPARE_12", help="Directory containing the trajectory data generated by Turbomole (default: PREPARE_12)")
    return vars(parser.parse_args())


def main(target_dir: str):
    data_path = os.path.join(set_data_prefix(), target_dir)
    data_prefix = os.path.join(data_path, "GEO_100000", "test")
    db_name = "md_trajectory_bohr_hartree_aut.db"
    target_path = os.path.join(data_prefix, db_name)
    db_spainn = connect(target_path)

    table_data = [
        {
            'Molecule': db_spainn.get_atoms(mols+1).get_chemical_formula(),
            'S$_0$': db_spainn.get(mols+1).data['energy'][0][0],
            'S$_1$': db_spainn.get(mols+1).data['energy'][0][1],
        }
        for mols in range(1462) #len(db_spainn)
    ]

    df = pd.DataFrame(table_data)

    # Create a combined histogram plot
    sns.histplot(data=df, bins=60, kde=False, multiple='layer')

    # Set labels and title
    plt.xlabel('Energy / Hartree')
    plt.ylabel('Count')
    plt.title('Distribution of Energies in the Dataset')

    # Save the plot
    plt.savefig("energy_distribution.png", dpi=300, bbox_inches='tight')

if __name__=="__main__":
    args = parse_args()
    main(**args)