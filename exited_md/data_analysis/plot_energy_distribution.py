import os
import argparse
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from tqdm import tqdm
from ase.db import connect

from md_with_schnet.utils import set_data_prefix
from md_with_schnet.setup_logger import setup_logger

logger = setup_logger(logging_level_str="info")

# This is the code from the first SPaiNN tutorial, which is used to plot the energy distribution of the prepared dataset.
# Example command to run the script from within code directory:
"""
python -m exited_md.data_analysis.plot_energy_distribution --trajectory_dir PREPARE_12/spainn_datasets/sandbox_data --units bohr_hartree_aut
"""

def parse_args() -> dict:
    """ 
    Parse command-line arguments. 
    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Prepare TDDFT data for usage in SchNetPack")
    parser.add_argument("--trajectory_dir", type=str, default="PREPARE_12/spainn_datasets", help="Directory containing the trajectory data generated by Turbomole (default: PREPARE_12/spainn_datasets)")
    parser.add_argument("--units", type=str, default="angstrom_kcal_per_mol_fs", choices=["angstrom_kcal_per_mol_fs", "angstrom_ev_fs", "bohr_hartree_aut"], help="Units for the input data (default: angstrom_kcal_per_mol_fs).")
    parser.add_argument("--dirs_to_plot", type=int, default=25, help="Number of GEO directories to plot (default: 25).")
    return vars(parser.parse_args())


def main(trajectory_dir: str, units: str, dirs_to_plot: int):
    # setup the paths to the necessary files
    data_prefix = set_data_prefix()
    md_name = f"md_trajectory_{units}.db"
    md_path = os.path.join(data_prefix, trajectory_dir, md_name)

    db_spainn = connect(md_path)
    logger.info(f"Loaded database from {md_path}")
    
    nr_of_molecules = dirs_to_plot * 3000  # assuming 3000 samples per directory
    if len(db_spainn) < nr_of_molecules:
        logger.warning(f"Database contains only {len(db_spainn)} molecules, but {nr_of_molecules} were requested.")
        nr_of_molecules = len(db_spainn)

    table_data = [
        {
            'Molecule': db_spainn.get_atoms(mols+1).get_chemical_formula(),
            'S$_0$': db_spainn.get(mols+1).data['energy'][0][0],
            'S$_1$': db_spainn.get(mols+1).data['energy'][0][1],
        }
        for mols in tqdm(range(nr_of_molecules), desc="Extracting molecules")
    ]
    logger.info(f"Extracted {len(table_data)} molecules from the database.")

    df = pd.DataFrame(table_data)

    # Create a combined histogram plot
    sns.histplot(data=df, bins=300, kde=False, multiple='layer')

    # Set labels and title
    plt.xlabel('Energy / Hartree')
    plt.ylabel('Count')
    plt.title('Distribution of Energies in the Dataset')

    # Save the plot
    plot_dir_path = os.path.expanduser("~/whk/code/exited_md/data_analysis/plots")
    os.makedirs(plot_dir_path, exist_ok=True)
    plot_path = os.path.join(plot_dir_path, f"energy_distribution_{units}_first_{dirs_to_plot}_dirs.png")
    plt.savefig(plot_path, dpi=300, bbox_inches='tight')
    logger.info(f"Energy distribution plot saved to {plot_path}")


if __name__=="__main__":
    args = parse_args()
    main(**args)