import os
import argparse

from tqdm import tqdm

from excited_state_md.preprocessing.utils import prepare_last_excited_cycles, set_path_and_remove_old_file
from ground_state_md.utils import set_data_prefix
from ground_state_md.setup_logger import setup_logger
from ground_state_md.preprocessing.extract import get_sorted_mdlog_files, extract_property_from_log_files

# Example command to run the script from within code directory:
"""
python3 -m excited_state_md.preprocessing.extract --property positions --target_dir PREPARE_12
"""

logger = setup_logger(logging_level_str="info")

def parse_args() -> dict:
    """ Parse command-line arguments. 

    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Extract the positions or velocities into a text file for all GEO folders.")
    parser.add_argument("--target_dir", type=str, default="PREPARE_12", help="Directory containing the trajectory data generated by Turbomole (default: PREPARE_12)")
    parser.add_argument("--computed_cycles", type=int, default=1461, help="Number of cycles for which the ground state gradients were computed (default: 1461)")
    parser.add_argument("-p", "--property", type=str, default="positions", choices=["positions", "velocities"], help="Property to extract from log files (default: positions)")
    return vars(parser.parse_args())

##############################################################################################################
################# Functions to extract positions from mdlog files and write them to a txt file ################
##############################################################################################################


##############################################################################################################

def main(target_dir: str, computed_cycles: int, property: str):
    """
    Main function to extract all positions from different log files and save them to a text file.
    Args:
        target_dir (str): Directory where the log files are located.
        computed_cycles (int): Number of cycles for which the gradients were computed.
        property (str): The property to extract from the log files (e.g., "positions").
    """
    # setup
    data_path = os.path.join(set_data_prefix(), target_dir)
    logger.debug(f"data_path: {data_path}")
    command_path = os.path.expanduser(f'~/whk/code/ground_state_md/preprocessing/extract_{property}.sh')
    if not os.path.exists(command_path):
        raise FileNotFoundError(f"Command path {command_path} does not exist. Please check the path.")

    # get all valid trajectories and the number of their last excited cycles
    geo_dirs_with_last_excited_cycles = prepare_last_excited_cycles(data_path, computed_cycles)

    # excited cycle and then from ex_gradient file the rest
    for geo_dir, _last_excited_cycle in tqdm(geo_dirs_with_last_excited_cycles.items(), desc=f"Extracting {property}"):
        path_to_mdlog_files = os.path.join(data_path, geo_dir, "test")
        output_path = set_path_and_remove_old_file(data_path, geo_dir, f"{property}.txt")

        # touch the output file and add header
        with open(output_path, "w") as f:
            f.write(f"# Extracted {property} from AIMD log files in {path_to_mdlog_files}\n")
            f.write("# All properties are in atomic units\n")

        log_files = get_sorted_mdlog_files(path_to_mdlog_files)
        extract_property_from_log_files(log_files, path_to_mdlog_files, command_path, output_path)
        logger.info(f"Extracted {property} saved to {output_path}")
        
            


if __name__ == "__main__":
    args = parse_args()
    main(**args)
    
        