import os
import argparse
import pandas as pd

from md_with_schnet.setup_logger import setup_logger


# Example command to run the script from within code directory:
"""
python -m md_with_schnet.evaluation.combine_test_metrics -mdir epochs_1000_bs_100_lr_0.0001_seed_42 
"""


logger = setup_logger("debug")

def parse_args() -> dict:
    """ 
    Parse command-line arguments. 

    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Script for predicting with trained model on XTB test data.")
    # paths setup
    parser.add_argument("--trajectory_dir", type=str, default="MOTOR_MD_XTB/T300_1", help="Directory containing the trajectory data generated by Turbomole (default: MOTOR_MD_XTB/T300_1)")
    parser.add_argument("-mdir", "--model_dir", type=str, default="epochs_1000_bs_100_lr_0.0001_seed_42", help="Directory of the trained model (default: epochs_1000_bs_100_lr_0.0001_seed_42)")
    parser.add_argument("-f", "--fold", type=int, default=0, help="Fold number for cross-validation (default: 0)")
    return vars(parser.parse_args())

def main(trajectory_dir: str, model_dir: str, fold: int) -> None:
    home_dir = os.path.expanduser("~")
    path_to_runs = os.path.join(home_dir, "whk/code/md_with_schnet/neural_net/runs")
    unit_systems = ["angstrom_kcal_per_mol_fs", "angstrom_ev_fs", "angstrom_hartree_fs"]
    logger.info(f"Unit systems to be examined: {unit_systems}")
    results = {}
    
    for units in unit_systems:
        target_dir = os.path.join(path_to_runs, units, trajectory_dir, model_dir)
        logger.info(f"Processing directory: {target_dir}")
        
        # Check if the directory exists
        if not os.path.exists(target_dir):
            logger.error(f"Directory {target_dir} does not exist. Skipping.")
            continue
        
        # Load the metrics file
        metrics_file = os.path.join(target_dir, f"test_metrics_fold_{fold}.csv")
        if not os.path.isfile(metrics_file):
            logger.error(f"Metrics file {metrics_file} does not exist. Skipping.")
            continue
        
        df = pd.read_csv(metrics_file)
        results[units] = df
        logger.info(f"Loaded metrics for {units}: {df.head()}")


if __name__ == "__main__":
    args = parse_args()
    main(**args)

