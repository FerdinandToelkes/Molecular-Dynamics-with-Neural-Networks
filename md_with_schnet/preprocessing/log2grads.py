import os
import argparse

from md_with_schnet.utils import set_data_prefix
from md_with_schnet.setup_logger import setup_logger

# Script to extract gradients from log files generated by xtb. Uses the bash script extract_gradients.sh.
# Example command to run the script from within code directory:
"""
python -m md_with_schnet.preprocessing.log2grads
"""

logger = setup_logger(logging_level_str="debug")

def parse_args() -> dict:
    """ Parse command-line arguments. 

    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Plotting script for MD17 dataset")
    parser.add_argument("--target_dir", type=str, default="turbo_test", help="Target directory where the data is found (default: turbo_test)")
    return vars(parser.parse_args())


def main(target_dir: str):
    """
    Main function to extract gradients from log files and save them to a text file.
    Args:
        target_dir (str): Directory where the log files are located.
    """
    # setup
    data_path = os.path.join(set_data_prefix(), target_dir)
    command_path = os.path.expanduser('~/whk/code/md_with_schnet/data_analysis/extract_gradients.sh')
    output_path = os.path.join(data_path, "gradients.txt")
    if os.path.exists(output_path):
        logger.debug("Removing old gradients.txt file")
        os.remove(output_path)
    
    # log some info
    logger.debug(f"data_path: {data_path}")
    logger.debug(f"command_path: {command_path}")
    logger.debug(f"output_path: {output_path}")
    
    # list all files in data_path
    log_files = os.listdir(data_path)
    log_files = [f for f in log_files if f.startswith("mdlog.")]

    # sort log files by their number (after the dot)
    log_files.sort(key=lambda x: int(x.split(".")[1]))
    logger.debug(log_files)

    for log_file in log_files:
        logger.debug(f"Processing {log_file}")
        log_path = os.path.join(data_path, log_file)
        
        # execute bash script extract_gradients.sh
        os.system(f"bash {command_path} {log_path} >> {output_path}")

if __name__ == "__main__":
    args = parse_args()
    main(**args)
    
        