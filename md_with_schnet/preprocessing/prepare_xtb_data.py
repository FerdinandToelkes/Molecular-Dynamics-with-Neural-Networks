import os
import argparse

from schnetpack.data import ASEAtomsData

from md_with_schnet.units import convert_distances, convert_energies, convert_forces, convert_velocities
from md_with_schnet.utils import set_data_prefix
from md_with_schnet.setup_logger import setup_logger
from md_with_schnet.preprocessing.prepare_xtb_in_atomic_units import convert_trajectory_to_ase, get_overview_of_dataset, get_trajectory_from_txt_and_reshape, get_all_energies_from_txt, get_atomic_numbers_from_xyz

logger = setup_logger(logging_level_str="debug")


# Example command to run the script from within code directory:
"""
python -m md_with_schnet.preprocessing.prepare_xtb_data --trajectory_dir MOTOR_MD_XTB/T300_1 --num_atoms 48 --position_unit angstrom --energy_unit kcal/mol --time_unit fs
"""

def parse_args() -> dict:
    """ 
    Parse command-line arguments. 
    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Prepare XTB data for usage in SchNetPack")
    parser.add_argument("--trajectory_dir", type=str, default="MOTOR_MD_XTB/T300_1", help="Directory containing the trajectory data generated by Turbomole (default: MOTOR_MD_XTB/T300_1)")
    parser.add_argument('--num_atoms', type=int, required=True, help='Number of atoms in the simulation. Can be found in the "control" file under "natoms".')
    parser.add_argument('--position_unit', type=str, default='angstrom', choices=['angstrom', 'bohr'], help='Target unit for positions to transform from atomic units to (default: angstrom)')
    parser.add_argument('--energy_unit', type=str, default='kcal/mol', choices=['kcal/mol', 'hartree', "ev"], help='Target unit for energies to transform from atomic units to (default: kcal/mol)')
    parser.add_argument('--time_unit', type=str, default='fs', choices=['fs', 'aut'], help='Target unit for time to transform from atomic units to (default: fs)')
    return vars(parser.parse_args())

def get_ase_unit_format(position_unit: str, energy_unit: str, time_unit: str) -> tuple:
    """
    Convert the units to the format expected by ASE.
    Args:
        position_unit (str): Unit for positions (e.g., 'angstrom', 'bohr').
        energy_unit (str): Unit for energies (e.g., 'kcal/mol', 'hartree', 'ev').
        time_unit (str): Unit for time (e.g., 'fs', 'aut').
    Returns:
        tuple: Formatted units for ASE.
    """
    # Capitalize the position unit for ASE
    pos_unit_ase = position_unit.capitalize() 
    
    # Convert energy and time units to ASE format
    if energy_unit == 'hartree':
        energy_unit_ase = 'Hartree'
    elif energy_unit == 'ev':
        energy_unit_ase = 'eV'
    else:
        energy_unit_ase = energy_unit

    if time_unit == 'aut':
        time_unit_ase = 'atomic_time_unit'
    else:
        time_unit_ase = time_unit
    
    force_unit_ase = f"{energy_unit_ase}/{pos_unit_ase}"  # e.g., kcal/mol/Angstrom
    velocity_unit_ase = f"{pos_unit_ase}/{time_unit_ase}"  # e.g., Angstrom/fs
    ase_units = {
        'distance': pos_unit_ase,
        'energy': energy_unit_ase,
        'forces': force_unit_ase,
        'velocities': velocity_unit_ase,
        'time': time_unit_ase
    }
    return ase_units


def main(trajectory_dir: str, num_atoms: int, position_unit: str, energy_unit: str, time_unit: str):
    """
    Main function to prepare XTB data in units of Angstrom and kcal/mol for usage in SchNetPack.
    Args:
        trajectory_dir (str): Directory containing the trajectory data generated by Turbomole.
        num_atoms (int): Number of atoms in the simulation. Can be found in the "control" file under "natoms".
    """
    # setup paths to the necessary files
    data_prefix = os.path.join(set_data_prefix(), trajectory_dir)
    traj_path = os.path.join(data_prefix, 'positions.txt')
    energy_path = os.path.join(data_prefix, 'energies.txt')
    grads_path = os.path.join(data_prefix, 'gradients.txt')
    vels_path = os.path.join(data_prefix, 'velocities.txt')
    db_name = f"md_trajectory_{position_unit}_{energy_unit.replace('/', '_')}_{time_unit}.db"
    target_path = os.path.join(data_prefix, db_name)

    if not os.path.exists(traj_path) or not os.path.exists(energy_path) or not os.path.exists(grads_path) or not os.path.exists(vels_path):
        logger.error(f"One or more files do not exist in the specified directory: {data_prefix}")
        raise FileNotFoundError(f"One or more files do not exist in the specified directory: {data_prefix}\n"
                                "Try running log2egy > energies.txt and the extract.py script for the different properties in the same directory.")

    logger.debug("Extracting data from .txt files")
    energy_traj, number_of_samples  = get_all_energies_from_txt(energy_path)
    coords_traj = get_trajectory_from_txt_and_reshape(traj_path, number_of_samples, num_atoms, usecols=(1, 2, 3))
    grads_traj = get_trajectory_from_txt_and_reshape(grads_path, number_of_samples, num_atoms, usecols=(0, 1, 2))
    forces_traj = -grads_traj  # Convert gradients to forces
    velocities_traj = get_trajectory_from_txt_and_reshape(vels_path, number_of_samples, num_atoms, usecols=(1, 2, 3))
    atomic_numbers = get_atomic_numbers_from_xyz(traj_path, num_atoms, extra_lines=3)

    # covert from atomic units to Angstrom and kcal/mol
    force_unit = f"{energy_unit}/{position_unit}"  # e.g., kcal/mol/Angstrom
    velocity_unit = f"{position_unit}/{time_unit}"  # e.g., Angstrom/fs
    logger.info(f"Converting units from atomic units to {position_unit}, {energy_unit} and {time_unit} (and {force_unit}, {velocity_unit})")
    coords_traj = convert_distances(coords_traj, from_units='bohr', to_units=position_unit)  
    energy_traj = convert_energies(energy_traj, from_units='hartree', to_units=energy_unit)
    forces_traj = convert_forces(forces_traj, from_units='hartree/bohr', to_units=force_unit)
    velocities_traj = convert_velocities(velocities_traj, from_units='bohr/aut', to_units=velocity_unit)

    # convert trajectory data to ASE Atoms objects and properties
    atoms_list, property_list = convert_trajectory_to_ase(coords_traj, energy_traj, forces_traj, velocities_traj, atomic_numbers)

    # Create a new dataset in the schnetpack format
    if os.path.exists(target_path):
        logger.info(f"File {target_path} already exists, loading it.")
        new_dataset = ASEAtomsData(target_path)
    else:
        logger.info(f"File {target_path} does not exist, creating it.")
        # create a new dataset
        # ase needs the distance unit in capitalized form
        ase_units = get_ase_unit_format(position_unit, energy_unit, time_unit)
        new_dataset = ASEAtomsData.create(
            target_path, 
            distance_unit=ase_units['distance'],
            property_unit_dict={
                'energy': ase_units['energy'],
                'forces': ase_units['forces'],
                'velocities': ase_units['velocities']
                },
        )
        # add systems to the dataset
        new_dataset.add_systems(property_list, atoms_list)

    # get overview of the dataset
    get_overview_of_dataset(new_dataset)

if __name__=="__main__":
    args = parse_args()
    main(**args)