import os
import argparse

from schnetpack.data import ASEAtomsData

from md_with_schnet.units import BOHR_TO_ANGSTROM, HARTREE_TO_KCAL_MOL, AUT_TO_FS
from md_with_schnet.utils import set_data_prefix
from md_with_schnet.setup_logger import setup_logger
from md_with_schnet.preprocessing.prepare_xtb_in_atomic_units import convert_trajectory_to_ase, get_overview_of_dataset, get_trajectory_from_txt_and_reshape, get_all_energies_from_txt, get_atomic_numbers_from_xyz

logger = setup_logger(logging_level_str="debug")


# Example command to run the script from within code directory:
"""
python -m md_with_schnet.preprocessing.prepare_xtb_ang_kcal_mol --trajectory_dir MOTOR_MD_XTB/T300_1 --num_atoms 48
"""

def parse_args() -> dict:
    """ 
    Parse command-line arguments. 
    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Prepare XTB data for usage in SchNetPack")
    parser.add_argument("--trajectory_dir", type=str, default="MOTOR_MD_XTB/T300_1", help="Directory containing the trajectory data generated by Turbomole (default: MOTOR_MD_XTB/T300_1)")
    parser.add_argument('--num_atoms', type=int, required=True, help='Number of atoms in the simulation. Can be found in the "control" file under "natoms".')
    return vars(parser.parse_args())


def main(trajectory_dir: str, num_atoms: int):
    """
    Main function to prepare XTB data in units of Angstrom and kcal/mol for usage in SchNetPack.
    Args:
        trajectory_dir (str): Directory containing the trajectory data generated by Turbomole.
        num_atoms (int): Number of atoms in the simulation. Can be found in the "control" file under "natoms".
    """
    # setup paths to the necessary files
    data_prefix = os.path.join(set_data_prefix(), trajectory_dir)
    traj_path = os.path.join(data_prefix, 'positions.txt')
    energy_path = os.path.join(data_prefix, 'energies.txt')
    grads_path = os.path.join(data_prefix, 'gradients.txt')
    vels_path = os.path.join(data_prefix, 'velocities.txt')
    target_path = os.path.join(data_prefix, 'md_trajectory_ang_kcal_mol.db')

    if not os.path.exists(traj_path) or not os.path.exists(energy_path) or not os.path.exists(grads_path) or not os.path.exists(vels_path):
        logger.error(f"One or more files do not exist in the specified directory: {data_prefix}")
        raise FileNotFoundError(f"One or more files do not exist in the specified directory: {data_prefix}\n"
                                "Try running log2egy > energies.txt and the extract.py script for the different properties in the same directory.")

    logger.debug("Extracting data from .txt files")
    energy_traj, number_of_samples  = get_all_energies_from_txt(energy_path)
    coords_traj = get_trajectory_from_txt_and_reshape(traj_path, number_of_samples, num_atoms, usecols=(1, 2, 3))
    grads_traj = get_trajectory_from_txt_and_reshape(grads_path, number_of_samples, num_atoms, usecols=(0, 1, 2))
    forces_traj = -grads_traj  # Convert gradients to forces
    velocities_traj = get_trajectory_from_txt_and_reshape(vels_path, number_of_samples, num_atoms, usecols=(1, 2, 3))
    atomic_numbers = get_atomic_numbers_from_xyz(traj_path, num_atoms, extra_lines=3)

    # covert from atomic units to Angstrom and kcal/mol
    logger.debug("Converting units from atomic units to Angstrom, kcal/mol and femtoseconds")
    coords_traj *= BOHR_TO_ANGSTROM  # Convert coordinates from Bohr
    energy_traj *= HARTREE_TO_KCAL_MOL  # Convert energies from Hartree to kcal/mol
    forces_traj *= HARTREE_TO_KCAL_MOL / BOHR_TO_ANGSTROM  # Convert forces from Hartree/Bohr to kcal/mol/Angstrom
    velocities_traj *= BOHR_TO_ANGSTROM / AUT_TO_FS  # Convert velocities from Bohr/AUT to Angstrom/fs

    # convert trajectory data to ASE Atoms objects and properties
    atoms_list, property_list = convert_trajectory_to_ase(coords_traj, energy_traj, forces_traj, velocities_traj, atomic_numbers)

    # Create a new dataset in the schnetpack format
    if os.path.exists(target_path):
        logger.info(f"File {target_path} already exists, loading it.")
        new_dataset = ASEAtomsData(target_path)
    else:
        logger.info(f"File {target_path} does not exist, creating it.")
        # create a new dataset
        new_dataset = ASEAtomsData.create(
            target_path, 
            distance_unit='Angstrom',
            property_unit_dict={
                'energy':'kcal/mol', 
                'forces':'kcal/mol/Angstrom', 
                'velocities':'Angstrom/fs'
                },
        )
        # add systems to the dataset
        new_dataset.add_systems(property_list, atoms_list)

    # get overview of the dataset
    get_overview_of_dataset(new_dataset)

if __name__=="__main__":
    args = parse_args()
    main(**args)