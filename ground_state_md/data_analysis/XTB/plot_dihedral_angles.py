import argparse
import os
import numpy as np

# for interactive plotting
import plotly.graph_objects as go
# ensure that no conflict with jupyter package (ipykernel) occurs
import plotly.io as pio
pio.renderers.default = 'browser'

from ground_state_md.setup_logger import setup_logger
from ground_state_md.utils import set_data_prefix
from ground_state_md.units import convert_time


logger = setup_logger(logging_level_str="debug")

# Script to generate plots comparing the different dihedral angles --trajectory_dir MOTOR_MD_XTB/T300_1 --show_plots(potential etc.).
# Example command to run the script from within code directory:
"""
python -m ground_state_md.data_analysis.XTB.plot_dihedral_angles --trajectory_dir MOTOR_MD_XTB/T300_1
"""


def parse_args() -> dict:
    """ 
    Parse command-line arguments. 
    Returns:
        dict: Dictionary containing command-line arguments.
    """
    parser = argparse.ArgumentParser(description="Plotting script for XTB datasets")
    parser.add_argument("--trajectory_dir", type=str, default="MOTOR_MD_XTB/T300_1", help="Directory containing the trajectory data generated by Turbomole (default: MOTOR_MD_XTB/T300_1)")
    parser.add_argument("--nr_of_configs", type=int, default=-1, help="Number of configurations to use (default: -1). If negative, all available configurations will be used.")
    return vars(parser.parse_args())

def create_interactive_angles_plot(angles: dict, time_steps: np.ndarray, plot_dir: str, trajectory_dir: str):
    """
    Create an interactive plot with dropdown buttons to select different properties.
    Args:
        properties (dict): Dictionary containing the properties to plot.
        time_steps (np.ndarray): Array of time steps.
        plot_dir (str): Directory to save the plot.
        trajectory_dir (str): Directory containing the trajectory data for the plot title.
    """
    #### Build the figure ##################################################
    fig = go.Figure()

    all_props = list(angles.keys())
    for i, prop_name in enumerate(all_props):
        y = angles[prop_name]
        
        # Add the trace:
        label = prop_name.replace("_", " ").capitalize()
        fig.add_trace(
            go.Scatter(
                x=time_steps,
                y=y,
                mode="lines",
                name=f"{label}",
            )
        )
    

    #### Initial layout ##################################################
    fig.update_layout(
        updatemenus=[
            dict(
                active=0,
                x=0.0,
                y=1.15,
                xanchor="left",
                yanchor="top",
                direction="down",
                pad={"r": 10, "t": 10},
                showactive=True,
            )
        ],
        title={
            "text": f"Dihedral Angles over Time for {trajectory_dir}",
            "x": 0.5,
            "xanchor": "center",
        },
        xaxis_title="Time [ps]",
        yaxis_title="Angle [degree]",
    )
    # save the figure to a file
    traj_dir = trajectory_dir.replace("/", "_")
    fig.write_html(f"{plot_dir}/dihedral_angles_{traj_dir}.html")

    fig.show()

def main(trajectory_dir: str, nr_of_configs: int):
    # setup
    plot_dir = os.path.expanduser('~/whk/code/ground_state_md/data_analysis/plots/XTB')
    data_prefix = os.path.join(set_data_prefix(), trajectory_dir)
    path = os.path.join(data_prefix, 'multiplot.dat')

    all_angles = np.loadtxt(path, usecols=(1, 2, 3, 4, 5)) # idx, alpha, beta, gamma, delta, delta'

    logger.debug(f'all_angles.shape: {all_angles.shape}')
    if nr_of_configs > all_angles.shape[0]:
        logger.warning(f"Requested {nr_of_configs} configurations, but only {all_angles.shape[0]} are available. Using all available configurations.")
        nr_of_configs = all_angles.shape[0]
    elif nr_of_configs < 0:
        logger.info(f"Using all available configurations.")
        nr_of_configs = all_angles.shape[0]
    angles = all_angles[:nr_of_configs]
    alpha = angles[:, 0]
    alpha[alpha < 0] += 360  # ensure alpha is in the range [0, 360] degrees

    angles_dict = {
        "alpha": alpha,
        "beta": angles[:, 1],
        "gamma": angles[:, 2],
        "delta": angles[:, 3],
        "delta_prime": angles[:, 4]
    }
    # time steps of 40 atomic unit of time
    time_step_aut = 40  # in atomic units
    time_step_ps = convert_time(time_step_aut, from_units="aut", to_units="ps")
    time_steps = np.arange(nr_of_configs) * time_step_ps
    logger.debug(f"time_step: {time_step_aut} aut")
    logger.debug(f"time_step: {time_step_ps} ps")
    create_interactive_angles_plot(angles_dict, time_steps, plot_dir, trajectory_dir)


if __name__=="__main__":
    args = parse_args()
    main(**args)